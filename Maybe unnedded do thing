%Find a single adjacent charger
get_single_adjacent_charger(Pos, ChargerNum) :- map_adjacent(Pos, _, c(ChargerNum)).

%Follow the given path to a charger and recharge
path_to_charger(A, Path, OutEnergy):-
    agent_do_moves(A, Path),
    get_agent_position(A, CurrentPos),
    get_single_adjacent_charger(CurrentPos, X),
    agent_topup_energy(A, c(X)),
    ailp_grid_size(GS),
    OutEnergy is (GS * GS) / 4.

%Assuming that the input link is new, add it to the list
get_new_link_list(Link, LinkList, [Link | LinkList]) :- not(contains(LinkList, Link)).
%Otherwise ignore it
get_new_link_list(_, LinkList, LinkList).

%Follow the given path to the given oracle. Then ask for its links, and "return" the new list of links and the energy there
path_to_oracle(A, Path, OracleNum, CurrentLinks, OutLinks, OutEnergy):-
    agent_do_moves(A, Path),
    agent_ask_oracle(A, o(OracleNum), link, NewLink),
    get_new_link_list(NewLink, CurrentLinks, OutLinks),
    get_agent_energy(A, OutEnergy).

find_queariable_oracle(CurrentEnergy, EAsk, AskedOracles, CurrentPos, OracleNum, PathResult):-
    Allowed_Energy is CurrentEnergy - EAsk, %The "Start energy" for this search should be the amount of energy the agent can actually spend moving
    find_astar(find(o(OracleNum)), AskedOracles, CurrentPos, Allowed_Energy, PathResult).

attempt_secure_path_to_new_oracle(Agent, CurrentEnergy, EAsk, AskedOracles, OracleNum, PathToOracle, PathToCharger):-
    get_agent_position(Agent, CurrentPos),
    find_queariable_oracle(CurrentEnergy, EAsk, AskedOracles, CurrentPos, OracleNum, [PathToOracle, PathCost]),
    
    EnergyAfterOracle is CurrentEnergy - (PathCost + EAsk),
    last(PathToOracle, NextToOracle),
    find_astar(find(c(_)), [], NextToOracle, EnergyAfterOracle, [PathToCharger, LengthToCharger]),  %See if you can reach a charger from the next oracle

    %If we have found a path to both oracle and charger after that we can take...
    TotalEnergy is EnergyAfterOracle + LengthToCharger,
    TotalEnergy =< CurrentEnergy,
    !. %Greedily assume this is the correct path

%Assuming we are in a safe position, attempt to move to a new safe position. In this case, we succeed
explore_oracles(Agent, CurrentEnergy, EAsk, _, AskedOracles, AccLinks, MyLinks):-
    %See if there is a "Secure" way of getting to an oracle while being able to go to a charger afterwards
    attempt_secure_path_to_new_oracle(Agent, CurrentEnergy, EAsk, AskedOracles, X, PathToOracle, NextPathToCharger),
    path_to_oracle(Agent, PathToOracle, X, AccLinks, NextAccLinks, NextEnergy),
    NextAskedOracles = [o(X) | AskedOracles],
    %We have already moved, as we greedily assume this is optimum. Cut to prevent disasterous backtracking
    !,
    %Recursivly call again
    explore_oracles(Agent, NextEnergy, EAsk, NextPathToCharger, NextAskedOracles, NextAccLinks, MyLinks).

%In this case, we were unable to get a new secure path. Assuming we are in a safe position, move to the charger, then continue
explore_oracles(Agent, _, EAsk, [PHead | PTail], AskedOracles, AccLinks, MyLinks):-
    path_to_charger(Agent, [PHead | PTail], NewEnergyHere),
    !, %Greedily assume this is optimal. You no longer have a route to a charger if you can't find a new oracle, otherwise it may
    %infinitely loop at this charger. So if the first case fails, you must now enter the later states
    explore_oracles(Agent, NewEnergyHere, EAsk, [], AskedOracles, AccLinks, MyLinks).

%In this case, we just recharged, but can't find a safe oracle. So we must try find a final oracle to go to
explore_oracles(Agent, CurrentEnergy, EAsk, [], AskedOracles, AccLinks, MyLinks):-  
    get_agent_position(Agent, CurrentPos),
    find_queariable_oracle(CurrentEnergy, EAsk, AskedOracles, CurrentPos, X, [FinalPath, _]),
    path_to_oracle(Agent, FinalPath, X, AccLinks, MyLinks, _),
    %We are done
    !.

%We can no longer find any oracles, safe or not. Therefore we set the answer equal to the accumulator, and end
explore_oracles(_, _, _, [], _, MyLinks, MyLinks):- !.

find_identity(SecretIdentity):-
    my_agent(A),
    get_agent_energy(A, StartEnergy),
    ailp_grid_size(GSize),
    EAsk is (GSize * GSize) / 40,
    %Agent, with start Energy, energy to ask, no path, nor asked oracles, nor links currently
    explore_oracles(A, StartEnergy, EAsk, [], [], [], MyLinks).


% Deduce the identity of the secret actor A
find_identity(A) :- 
    findall(A,actor(A),As), eliminate(As,A,1).